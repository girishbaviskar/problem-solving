class Solution {
    public int search(int[] nums, int target) {
        int pivot = findPivot(nums);
        int ans = binarySearch(nums, target, 0, pivot);
        if(ans == -1) {
            ans = binarySearch(nums, target, pivot + 1, nums.length - 1);
        }
        return ans;
    }

    public int findPivot(int[] arr) {
        int start = 0;
        int end = arr.length - 1;
        int pivot = 0;
        while(start <= end) {
      
            int mid = start + (end - start) / 2;
            if(mid < end && arr[mid] > arr[mid +1]) {
                pivot = mid;
            } else if(mid > start && arr[mid] < arr[mid - 1]) {
                pivot =  mid - 1;
            } 
            if(arr[start] >= arr[mid]) {
                end = mid -1;
            } else {
                start = mid + 1;
            }


        }
        return pivot;
    }
    
    public int binarySearch(int[] arr, int target, int start, int end) {

        while(start <= end) {
      
            int mid = start + (end - start) / 2;

            if (target < arr[mid]) {
                end = mid - 1;
            } else if (target > arr[mid]) {
                start = mid + 1;
            } else {
    
                return mid;
            }
        }
        return -1;
    }
}
